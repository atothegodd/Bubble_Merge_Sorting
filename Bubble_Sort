from pyglet.window import Window
from pyglet.app import run
from pyglet.shapes import Circle, Rectangle
from pyglet.graphics import Batch
from pyglet import clock
import math
import random

def hex_to_rgb(hex_color):
    return int(hex_color[1:3],16), int(hex_color[3:5],16),int(hex_color[5:7],16), 255

def bubble_sort(arr):
    n = len(arr)
    for i in range(n-1):
        for j in range(0, n-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]

class Renderer(Window):
    def __init__(self):
        super().__init__(640, 640, "Bubble Sort Algorithm")
        self.batch = Batch()
        self.x = [random.randint(10, 50) for _ in range(40)]
        self.bars = []
        self.bar_width = 7
        self.bar_spacing = 5
        self.colors = [
    (204, 153, 255), 
    (107, 83, 153), 
    (144, 138, 203), 
    (120, 155, 225),
    (176, 224, 230),
]


        
        for e, i in enumerate(self.x):
            x_pos = 100 + e * (self.bar_width + self.bar_spacing)
            self.bars.append(Rectangle(x_pos, 100, self.bar_width, i * 10, batch=self.batch))

        self.sorted = False
        self.i = 0
        self.j = 0

    def on_update(self, deltatime):
        if not self.sorted:
            n = len(self.x)
            if self.i < n - 1:
                if self.j < n - self.i - 1:
                    if self.x[self.j] > self.x[self.j + 1]:
                        self.x[self.j], self.x[self.j + 1] = self.x[self.j + 1], self.x[self.j]
                        self.update_bar_positions()
                    self.j += 1
                else:
                    self.j = 0
                    self.i += 1
            else:
                self.sorted = True
                self.update_bar_colors()

    def update_bar_positions(self):
        for e, i in enumerate(self.x):
            x_pos = 100 + e * (self.bar_width + self.bar_spacing)
            self.bars[e].x = x_pos
            self.bars[e].height = i * 10

    def on_draw(self):
        self.clear()
        self.batch.draw()
    
    def update_bar_colors(self):
        color_index = 0
        for bar in self.bars:
            color = self.colors[color_index % len(self.colors)]
            bar.color = color
            color_index += 1




renderer = Renderer()
clock.schedule_interval(renderer.on_update, 0.01)
run()
