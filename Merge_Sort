from pyglet.window import Window
from pyglet.app import run
from pyglet.shapes import Rectangle
from pyglet.graphics import Batch
from pyglet import clock
import random

class Renderer(Window):
    def __init__(self):
        super().__init__(800, 600, "Merge Sort Algorithm")
        self.batch = Batch()
        self.array = [random.randint(10, 50) for _ in range(40)]
        self.bars = []
        self.bar_width = 7
        self.bar_spacing = 3
        self.sorted = False
        self.steps = []
        self.colors = [
            (204, 153, 255), 
            (107, 83, 153), 
            (144, 138, 203), 
            (120, 155, 225),
            (176, 224, 230),
        ]
        self.current_color_index = 0

        total_width = len(self.array) * (self.bar_width + self.bar_spacing) - self.bar_spacing
        start_x = (self.width - total_width) // 2
        for i, height in enumerate(self.array):
            x_pos = start_x + i * (self.bar_width + self.bar_spacing)
            self.bars.append(Rectangle(x_pos, 100, self.bar_width, height * 10, batch=self.batch))
        self.merge_sort(self.array)

    def merge(self, arr, left, mid, right):
        left_half = arr[left:mid + 1]
        right_half = arr[mid + 1:right + 1]

        i = j = 0
        k = left

        while i < len(left_half) and j < len(right_half):
            if left_half[i] <= right_half[j]:
                arr[k] = left_half[i]
                i += 1
            else:
                arr[k] = right_half[j]
                j += 1
            k += 1

        while i < len(left_half):
            arr[k] = left_half[i]
            i += 1
            k += 1

        while j < len(right_half):
            arr[k] = right_half[j]
            j += 1
            k += 1

        self.steps.append(arr[:])

    def merge_sort(self, arr, left=0, right=None):
        if right is None:
            right = len(arr) - 1

        if left < right:
            mid = (left + right) // 2
            self.merge_sort(arr, left, mid)
            self.merge_sort(arr, mid + 1, right)
            self.merge(arr, left, mid, right)

    def on_update(self, dt):
        if self.steps:
            self.update_bars(self.steps.pop(0))
        else:
            self.update_bar_colors()

    def update_bars(self, arr):
        total_width = len(arr) * (self.bar_width + self.bar_spacing) - self.bar_spacing
        start_x = (self.width - total_width) // 2
        for i, height in enumerate(arr):
            x_pos = start_x + i * (self.bar_width + self.bar_spacing)
            self.bars[i].x = x_pos
            self.bars[i].height = height * 9

    def update_bar_colors(self):
        for bar in self.bars:
            color = self.colors[self.current_color_index % len(self.colors)]
            bar.color = color
            self.current_color_index += 1

    def on_draw(self):
        self.clear()
        self.batch.draw()

renderer = Renderer()
clock.schedule_interval(renderer.on_update, 0.1)
run()
